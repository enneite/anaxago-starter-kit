swagger: "2.0"
info:
  description: "API Anaxago. Pouvoir lister des projets et indiquer son intérêt pour leur financement."
  version: "0.0.1"
  title: "Anaxago Starter Kit"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "pitlejariel@hotmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/api/v1"

schemes:
  #- "https"
  - "http"
paths:
  /public/projects:
    get:
      tags:
        - "pet"
      summary: "Lit les projets"
      description: "Lit les projes"
      operationId: "listPublicProjects"
      produces:
        #- "application/xml"
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "filtre les projets par leurs statut"
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProjectPagination"
        400:
          description: "Invalid status value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

  /projects:
    get:
      tags:
        - "pet"
      summary: "Lit les projets"
      description: "Lit les projes"
      operationId: "listProjects"
      produces:
        #- "application/xml"
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "filtre les projets par leurs statut"
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProjectPagination"
        400:
          description: "Invalid status value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"


  /projects/{id}:
    get:
      summary: "Find pet by ID"
      description: "retourne un projet par son ID"
      operationId: "getPetById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID du projet à retourner"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

  /proposal/project/{projectId}:
    post:
      summary: "Marquer son intérêt pour un projet"
      description: ""
      operationId: "createProposal"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID du projet dans lequel on souhaite investir"
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "L'objet Proposal à créer (au format JSON)"
          required: true
          schema:
            $ref: "#/definitions/Proposal"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Proposal"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

  /proposal:
    get:
      summary: "Marquer son intérêt pour un projet"
      description: ""
      operationId: "ListProposal"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      #parameters:

      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProposalPagination"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

  /proposal/{id}:
    get:
      summary: "Marquer son intérêt pour un projet"
      description: ""
      operationId: "ReadProposal"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID de la proposition d'investissement"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Proposal"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    put:
      summary: "Marquer son intérêt pour un projet"
      description: ""
      operationId: "updateProposal"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID du projet dans lequel on souhaite modifier son investissement"
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "L'objet Proposal à créer (au format JSON)"
          required: true
          schema:
            $ref: "#/definitions/Proposal"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Proposal"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    delete:
      summary: "Marquer son intérêt pour un projet"
      description: "deleteProposal"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID du projet dans lequel on souhaite modifier son investissement"
          required: true
          type: "integer"
          format: "int64"
      responses:
        204:
          description: "successful operation"
          #schema:
          #  $ref: "#/definitions/Proposal"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"


securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://localhost/oauth"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"


definitions:
  Project:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Statut du projet"
        enum:
          - "OPEN"
          - "FUNDED"
      slug:
        type: "string"
        description: "slug du projet"
      description:
        type: "string"
        description: "desscription du projet"
      title:
        type: "string"
        description: "desscription du projet"
    #xml:
    #  name: "Order"
  Proposal:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      amount:
        type: "integer"
        format: "int64"
        description: "montant d'investissement souhaité"
      currency:
        type: "string"
        description: "devise pour l'investissement souhaité"
      project:
        $ref: "#/definitions/Project"
    #xml:
    #  name: "Category"

  AbstractPagination:
    properties:
      totalCount:
        description: nombre total de résultats
        type: integer
        format: int32
      page:
        description: page en cours
        type: integer
        format: int32
      max:
        description: nb de résultats par page
        type: integer
        format: int32
      sort:
        description: champ sur lequel on faitle tri
        type: string
      order:
        description: tri DESC ou ASC
        type: string
        enum: ["ASC", "DESC"]

  ProjectPagination:
    allOf:
      - $ref: '#/definitions/AbstractPagination'
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Project"
  ProposalPagination:
    allOf:
      - $ref: '#/definitions/AbstractPagination'
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Proposal"
  #ApiResponse:
  #  type: "object"
  #  properties:
  #    code:
  #      type: "integer"
  #      format: "int32"
  #    type:
  #      type: "string"
  #    message:
  #      type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"